
package org.zerock.b4.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.zerock.b4.dto.UploadResultDTO;

import lombok.extern.log4j.Log4j2;
import net.coobird.thumbnailator.Thumbnailator;

@RestController
@Log4j2
public class UpDownController {

	@Value("${org.zerock.upload.path}")// import 시에 springframework으로 시작하는 Value
  private String uploadPath;

	@PostMapping("/upload")
	public UploadResultDTO upload(MultipartFile file) {

		UploadResultDTO result = null;

		String fileName = file.getOriginalFilename();

		log.info("fileName: " + fileName);

		long size = file.getSize();

		String uuidStr = UUID.randomUUID().toString();

		String saveFileName = uuidStr+"_"+fileName;

		File saveFile = new File(uploadPath, saveFileName);

		try {
			// 파일 확장자 체크
			FileCopyUtils.copy(file.getBytes(), saveFile);

			result = UploadResultDTO.builder()
				.uuid(uuidStr)
				.fileName(fileName)
				.build();


			// 이미지 파일 여부 확인
			String mineType = Files.probeContentType(saveFile.toPath());
			
			log.info("mineType:" + mineType);
			
			if(mineType.startsWith("image")){

				// 업로드 성공 썸네일 
				File thumbFile = new File(uploadPath, "s_" +saveFileName);

				Thumbnailator.createThumbnail(saveFile, thumbFile, 100, 100);

				result.setImg(true);

			} // end if





		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}



		log.info("size: " + size);

		return result;
	}

	 @GetMapping("/view/{fileName}")
    public ResponseEntity<Resource> viewFileGET(@PathVariable String fileName){

        Resource resource = new FileSystemResource(uploadPath+File.separator + fileName);
        String resourceName = resource.getFilename();
        HttpHeaders headers = new HttpHeaders();

        try{
            headers.add("Content-Type", Files.probeContentType( resource.getFile().toPath() ));
        } catch(Exception e){
            return ResponseEntity.internalServerError().build();
        }
        return ResponseEntity.ok().headers(headers).body(resource);
    }
}






여러 개의 파일 데이터 업로드


에이작스로 업로드 할 땐 FormData 사용









첨부파일 업로드
- 첨부파일 추가 방법
1. 폼 태그 -> 과거에 많이 쓰던 방식 
<form>
<input type="file"> -> 1개의 파일밖에 사용되지 못함 -> html5로 넘어오면서 multiple 속성 사용
</form>
- 장점: 구현 간단(=UI가 간단) -> 초보자에게 적합
- 단점: 내가 선택한 첨부파일에 대한 피드백X, submit을 날려야지만 처리됨 -> 잘못된 파일을 올렸을 때 즉시 확인 불가능,
	에디터 사용 불가(FCK Editor)

2. ajax
주로 modal 창 이용 -> 1. file upload 따로, 2. submit 따로 --> 시점이 다름 => 바로보기 사용 가능
- 장점: WYSWYG(When You See When You Get), 다양한 적용
- 단점: 구현 난이도 올라감, 파일 관리 필요


<서버 측에서 파일 업로드 시 체크해야 할 것>
파일 -> 확장자 검증, 파일 이름 중복 -> 덮어쓰기, 저장 경로, 
       ★다운로드 -> 1. 운영 서버 내에 다운로드 
		    2. 별도의 서버 (보안) -> web server (Apache, Nginx)


.do를 사용했던 이유
서버쪽에서 web server를 호출해야 되는지 was를 호출해야 되는지 알기 쉽게 확장자를 써줬던 거임
.do면 was를 호출해라


파일 업로드하기 위해 필요한 설정
application.properits에 설정 추가
thumbnailator 추가
https://mvnrepository.com/artifact/net.coobird/thumbnailator/0.4.19
uuid(난수)

UpDownController - @RestController


다운로드
1. 직접 was에서 다운로드
- 퍼포먼스가 안좋음



<심볼릭 링크(Symbolic Link)>
네트워크 드라이브: 내 PC의 폴더를 다른 PC의 D드라이브에 거는 것 같은..?
-추가로 공부하면 좋음
(보안 체크)
referer: 어디서부터 이걸 호출했는지 확인하는 곳
-> 반드시 우리 사이트에서만 봤어야 함, 경로가 다르다면 불법적인 행위라고 간주 -> 막음
- 네트워크 드라이브
- 가장 쉽게 막는 보안은 Referer을 체크
- csrf - spring 시큐리티
- token 인증 추가
- nginx 서버를 처음 사용해서 코드가 들어가있지 않은 상태


*JWT -> 토큰 베이스 인증


포트폴리오
상품의 이미지로 파일 업로드

키오스크 연습 - 상품 클릭시 상품비동기로 추가 되게

파일업로드 단계
파일업로드 확인, 파일 조회, 파일 삭제
ajax 업로드는 FormData속성을 이용
1. 파일업로드 과정을 설명해라
2. 파일서버를 구성한 이유 다운로드 원리
3. Axios를 이용한 업로드 설명



[첨부파일]
- 첨부파일 추가 방법
1. 폼 태그 -> 과거에 많이 쓰던 방식 
<form>
<input type="file"> -> 1개의 파일밖에 사용되지 못함 -> html5로 넘어오면서 multiple 속성 사용
</form>
- 장점: 구현 간단(=UI가 간단) -> 초보자에게 적합
- 단점: 내가 선택한 첨부파일에 대한 피드백X, submit을 날려야지만 처리됨 -> 잘못된 파일을 올렸을 때 즉시 확인 불가능,
	에디터 사용 불가(FCK Editor)

2. ajax
주로 modal 창 이용 -> 1. file upload 따로, 2. submit 따로 --> 시점이 다름 => 바로보기 사용 가능
- 장점: WYSWYG(When You See When You Get), 다양한 적용
- 단점: 구현 난이도 올라감, 파일 관리 필요


<서버 측에서 파일 업로드 시 체크해야 할 것>
파일 -> 확장자 검증, 파일 이름 중복 -> 덮어쓰기, 저장 경로, 
       ★다운로드 -> 1. 운영 서버 내에 다운로드 
		    2. 별도의 서버 (보안) -> web server (Apache, Nginx)
	 / <img src="">

<form encType="multipart/form-data>

====================================================================================================

c: upload 파일 생성 -> github/ckck24/PART7 -> src -> main ->resources -> properties에 마지막 4줄 붙여넣기

https://github.com/coobird/thumbnailator
https://mvnrepository.com/artifact/net.coobird/thumbnailator
-> 0.4.19 ver Gradle 복사 -> build.gradle 붙여넣기
Postman 사용해서 확인
Post -> Headers -> key: Content-type value: multipart
body -> text -> key:file value: 이미지파일업로드 => send

*FileCopyUtils
*Stream을 쓰면 퍼포먼스는 더 좋지만, close는 항상 염두에 둬야 함
*UUID

#thumbnail

업로드 시
-업로드 파일 이름: UUID_파일이름
-> 이미지 파일 여부

====================================================================================================

<업로드 파일 다운로드>
WAS에서 다운로드 -> 퍼포먼스 떨어짐

<img src="경로">

*Nginx 80 포트로 
c드라이브에 webserver 폴더 생성
-> http://nginx.org/en/download.html
->	nginx/Windows-1.24.0 다운로드(안정화버전)
-> conf -> nginx.conf vscode로 열기 포트, 로컬 확인
-> cmd 명령어 입력
-> http://localhost 입력하면 nginx 창 뜸
-> webserver -> html -> 이미지 파일 넣고 -> http://localhost.파일이름.확장자 경로 사용하면 바로 이미지 뜸
-> properties에 경로 2개를 html 경로로 바꿔주기(window는 역슬래시 2개로 넣는 게 안전)
-> (nginx는 구동중) postman으로 파일 업로드 -> nginx폴더 확인 -> 브라우저에서도 뜨는지 확인

*업로드는 WAS / 다운로드, 조회는 별도의 서버(nginx)에서 합시다.
-> 장점: WAS 과부하 줄어듦


====================================================================================================

<심볼릭 링크(Symbolic Link)>
네트워크 드라이브: 내 PC의 폴더를 다른 PC의 D드라이브에 거는 것 같은..?
-추가로 공부하면 좋음
(보안 체크)
referer: 어디서부터 이걸 호출했는지 확인하는 곳
-> 반드시 우리 사이트에서만 봤어야 함, 경로가 다르다면 불법적인 행위라고 간주 -> 막음

*JWT -> 토큰 베이스 인증

====================================================================================================

<axios 이용 파일 업로드>

axios 라이브러리 추가
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
</script>
FormData : 디버깅이 어려움 


이미지의 확장자를 체크하는 정규표현식 <- chatGPT 이용
 

-비동기 통신 axios.post.then.catch
-javascript for in / for of <- 확인

-em / rem <- 확인


동적으로 만들면 addEventListner를 걸 수 없음
1. 실제로 이벤트가 걸려 있는 걸 찾아서 걸어야 함
2. onclick 이벤트를 직접 거는 방식